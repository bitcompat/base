name: build

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      build-args:
        type: string
        required: false
        default: ''
      cache-scope:
        type: string
        required: false
        default: 'buildkit'
      push:
        type: boolean
        required: false
        default: true
      version:
        type: string
        required: true
      major_only_tag:
        type: boolean
        default: false
        required: false
      revision:
        type: string
        required: false
        default: '1'
      debian_codename:
        type: string
        required: false
        default: bookworm
      latest:
        type: boolean
        required: false
        default: false
    secrets:
      AWS_ROLE_ARN:
        required: true
      COSIGN_PRIVATE_KEY:
        required: true
      COSIGN_PASSWORD:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}-${{ inputs.name }}-${{ inputs.cache-scope }}
  cancel-in-progress: true

jobs:
  build_package:
    name: Build package - ${{ inputs.name }}
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - uses: actions/github-script@v7
        id: version-tags
        env:
          VERSION: '${{ inputs.version }}'
          REVISION: '${{ inputs.revision }}'
          CODENAME: '${{ inputs.debian_codename }}'
          MAJOR_ONLY: ${{ inputs.major_only_tag && '1' || '0' }}
        with:
          result-encoding: string
          script: |
            const { REVISION: revision, VERSION: version, CODENAME: codename, MAJOR_ONLY: majorOnly } = process.env;
            const [ major, minor, patch ] = version.split('.').filter(V => '' !== V);
            
            return `
            ${major}.${minor}.${patch}-${codename}-r${revision}
            ${major}.${minor}.${patch}-${codename}
            ${major}.${minor}.${patch}
            ${major}.${minor}-${codename}
            ${major}.${minor}
            ${majorOnly ? major : ''}
            `;

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: github.repository_owner == 'bitcompat'
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
        if: github.repository_owner == 'bitcompat'
        with:
          registry-type: public
          mask-password: 'true'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ inputs.push == true }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: docker_meta
        name: Extract docker image metadata
        uses: docker/metadata-action@v5.5.1
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
            public.ecr.aws/bitcompat/${{ github.event.repository.name }},enable=${{ github.repository_owner == 'bitcompat' }}
          tags: |
            ${{ inputs.latest && 'latest' || '' }}
            ${{ steps.version-tags.outputs.result }}
            type=sha
            type=sha,format=long

      - name: Build and Push container images
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          build-args: |-
            ${{ inputs.build-args }}
            BUILD_VERSION=${{ inputs.version }}
          push: ${{ inputs.push }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha,scope=${{ inputs.cache-scope }}
          cache-to: type=gha,mode=max,scope=${{ inputs.cache-scope }}

      - name: Setup CRANE
        uses: imjasonh/setup-crane@v0.3

      - name: Login to ECR Public in CRANE
        run: crane auth login public.ecr.aws -u "${{ steps.login-ecr.outputs.docker_username_public_ecr_aws }}" -p "${{ steps.login-ecr.outputs.docker_password_public_ecr_aws }}"

      - name: Flatten images
        run: |
          echo $DOCKER_METADATA_OUTPUT_JSON | jq -r '.tags[]' | 
            while read -r IMG; do
              crane flatten "$IMG"
            done

      - name: Sign image with a key
        run: |
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${TAGS}
        if: ${{ inputs.push == true }}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
